\documentclass{scrreprt}
\usepackage[a3paper,twocolumn,landscape]{geometry}
\usepackage{animate}

\begin{document}
<<knitrOpts>>=
library(knitr)
.finished <- FALSE
knit_hooks$set(timeit = function(before) {
    if (before) {
      .current.time <<- Sys.time()
    } else {
      .duration <- round(difftime(Sys.time(), .current.time, units = "secs"))
      if(!.finished)
        write(
          paste0(
            knitr::opts_current$get(name = "label"), 
            ": ", 
            .duration),
          file = "Corridors-and-time-CHUNKTIMINGS.txt",
          ncolumns = 1,
          append = TRUE)
    }
})
write("Running times (in seconds) for chunks",
      "Corridors-and-time-CHUNKTIMINGS.txt", 
      append = FALSE)
START.TIME <- Sys.time()
knitr::opts_chunk$set(fig.show = 'hide',
                      fig.width = 22, 
                      fig.height = 14,
                      fig.path = atlas <- "atlas-Corridors-and-time/",
                      timeit = TRUE,
                      cache = FALSE,
                      out.width = "11in")
@

<<otherOpts>>=
# use RDS: allow previously generated files to be read in again
# saves time but might be dangerous. Must rely on `tempkey`
useRDS = TRUE
@

<<loadPackages>>=
library(tidyr)
library(lubridate)
library(data.table)
library(bit64)
library(dplyr); options(dplyr.width = Inf)
library(magrittr)
library(ggplot2)
library(viridis)
theme.text.size = 18
text.size = (5/14) * theme.text.size
theme_update(text = element_text(family = "", 
                                 face = "plain", colour = "black", size = theme.text.size, 
                                 lineheight = 0.9, 
                                 hjust = 0.5, vjust = 0.5, 
                                 angle = 0, margin = margin(), 
                                 debug = FALSE))
update_geom_defaults("text", list(size = text.size))
update_geom_defaults("line", list(size = 0.5))
library(ggrepel)
library(scales)
library(nycflights13)  # for airports
nycflights.airports <- airports
nycflights.planes   <- planes
nycflights.airlines <- as.data.table(airlines)
for (j in 1:ncol(nycflights.airlines)){
  set(nycflights.airlines, j = j, value = as.character(nycflights.airlines[[j]]))
}
nycflights.airlines[,short_name := gsub("\\s.*$", "", name)]
setnames(nycflights.airlines, "carrier", "UniqueCarrier")
setkey(nycflights.airlines, UniqueCarrier)
library(fasttime)
library(grattan)
ggplot2::update_geom_defaults("bar", new = list(width = 0.9))
library(directlabels)
library(ineq)  # for Gini()
library(forecast)
library(ggmap)
library(ggthemes)
@

<<loadData>>=
flights19872015 <-
  fread("../1987-2015-On-Time-Performance.csv", 
        select = c("Year", "Month", "DayofMonth", "DepTime", 
                   "ArrTime", "UniqueCarrier", "Origin",
                   "Dest", "Cancelled", "ArrDelay"),
        na.strings = c("NA", "(null)", ""))

# Corridor by origin dest seems off.
Corridors.by.origin.dest <- fread("../Corridor-by-origin-dest.csv")
setkey(Corridors.by.origin.dest, Origin, Dest)
flights19872015 <- 
  flights19872015 %>%
  setkey(Origin, Dest) %>%
  .[Corridors.by.origin.dest]
@

<<MarketIDs>>=
market_ids <- 
  fread("../dep_delay/On_Time_On_Time_Performance_2015_10.csv", select = c("Origin", "OriginCityMarketID")) %>% 
  setnames(old = c("OriginCityMarketID", "Origin"),
           new = c("MarketID", "FAA")) %>% 
  distinct
@

<<unique-dates>>=
unique_dates <-
  flights19872015 %>% 
  select(Year, Month, DayofMonth) %>%
  setkey(Year, Month, DayofMonth) %>%
  unique

unique_dates %>%
  .[ ,Weekday := weekdays(as.Date(sprintf("%d-%02d-%02d", Year, Month, DayofMonth)))] %>%
  .[ ,Week := 0L + cumsum(Weekday == "Monday")]
@


<<flights-by-day>>=
flights.by.day <- 
  flights19872015[,.(n = .N), keyby = list(Year, Month, DayofMonth)]

FlightsByDay <- 
  ts(flights.by.day$n, frequency = 7)
@

<<ncflights-by-day>>=
ncflights.by.day <- # noncancelled flights
  flights19872015[,.(n = sum(!Cancelled)), keyby = list(Year, Month, DayofMonth)]

ncflights.by.day %>%
  mutate(Date = as.Date(sprintf("%d-%02d-%02d", Year, Month, DayofMonth))) %>%
  ggplot(aes(x = Date, y = n)) + 
  geom_line(size = 0.1)
@

<<flights-by-week>>=
flights.by.week <- 
  flights.by.day[unique_dates][,.(n = sum(n)), keyby = Week]
@

<<var-comparison>>=
flights.by.week.ets <-
  flights.by.week %>%
  arrange(Week) %>%
  filter(Week > min(Week), Week < max(Week)) %$%
  ets(y = as.double(n), 
      # ensure no-nonnegative values
      # see http://stats.stackexchange.com/questions/107467/avoid-negative-results-in-holt-winters-forecasting
      lambda = TRUE)

plot(forecast(flights.by.week.ets, h = 52))

flights.by.week.arima <- 
  flights.by.week %>%
  arrange(Week) %>%
  filter(Week > min(Week), Week < max(Week)) %$%
  auto.arima(x = as.double(n))

plot(forecast(flights.by.week.arima, h = 52))
@

<<flights-by-weekday>>=
flights.by.day[unique_dates][,.(n = sum(n)), keyby = Weekday] %>%
  mutate(Weekday = factor(Weekday, levels = c("Monday", "Tuesday",
                                              "Wednesday", "Thursday", 
                                              "Friday", "Saturday", "Sunday"))) %>%
  ggplot(aes(x = Weekday, y = n)) + 
  geom_bar(stat = "identity", width = 1)

flights.by.day[unique_dates] %>%
  mutate(YearGroup = cut(Year, breaks = 6)) %>% # breaks = c(-Inf, 1992, 1997, 2002, 2007, 2012, Inf))) %>%
  mutate(Weekday = factor(Weekday, levels = c("Monday", "Tuesday",
                                              "Wednesday", "Thursday", 
                                              "Friday", "Saturday", "Sunday"))) %>%
  ggplot(aes(x = Weekday, fill = Weekday, y = n)) + 
  geom_violin() + 
  scale_y_continuous(label = comma) + 
  facet_wrap(~YearGroup)
@

<<US-Corridor-Corridor_DS>>=
# corridors <- 
#   readRDS("../Corridors.rds")
# 
# US_Corridors_by_Corridor_DS <- 
#   flights19872015 %>%
#   select(Corridor) %>% 
#   setkey(Corridor) %>%
#   unique %>%
#   corridors[.]
# 
# rm(corridors)  # 4.5 Gb
US_Corridors_by_Corridor_DS <- 
  fread("../US_Corridors_by_Corridor_DS.csv")
@

<<Add-Corridor_DS>>=
setkey(flights19872015, Corridor)
flights19872015 <- flights19872015[US_Corridors_by_Corridor_DS]
@

<<Corridors-by-year>>=
flights19872015[,.(n = .N), keyby = list(Year, Corridor_DS)][order(Year, -n)] %>%
  group_by(Year) %>%
  mutate(rank = row_number(desc(n))) %>%
  filter(rank <= 10, Year > 1987) %>%
  mutate(Corridor_DS = gsub(", [A-Z]{2}", "", gsub(" (Metropolitan Area)", 
                                                   "", 
                                                   Corridor_DS, fixed = TRUE))) %>%
  ggplot(aes(x = Year, y = n, color = Corridor_DS)) + 
  geom_line() 
@

<<ncCorridors-by-year>>=
flights19872015[,.(n = sum(!Cancelled)), keyby = list(Year, Corridor_DS)][order(Year, -n)] %>%
  group_by(Year) %>%
  mutate(rank = row_number(desc(n))) %>%
  filter(rank <= 10, Year > 1987) %>%
  mutate(Corridor_DS = gsub(", [A-Z]{2}", "", gsub(" (Metropolitan Area)", 
                                                   "", 
                                                   Corridor_DS, fixed = TRUE))) %>%
  ggplot(aes(x = Year, y = n, color = Corridor_DS)) + 
  geom_line() 
@

<<Corridors-by-day>>=
flights19872015[,.(n = .N), keyby = list(Year, Month, DayofMonth, Corridor_DS)]
@

<<Noncancelled-flights-by-Week-Corridor>>=
Noncancelled.flights.by.week.corridor <- 
  flights19872015[,.(n = sum(!Cancelled), 
                     avg_delay = sum(ArrDelay, na.rm = TRUE) / .N), 
                  keyby = list(Year, Month, DayofMonth, Corridor_DS)][unique_dates][,.(n = sum(n), 
                                                                                       avg_delay = sum(avg_delay)/.N), 
                                                                                    keyby = list(Week, Corridor_DS)]
@

<<Which-corridors-are-reversed>>=
data.table::CJ(
  OriginMarketID = market_ids$MarketID, 
  DestMarketID = market_ids$MarketID
) %>% 
  mutate(Route = paste(OriginMarketID, DestMarketID, sep = "-")) %>%
  mutate(Order = OriginMarketID < DestMarketID) %>% 
  filter(Order)


@

<<Centroids-by-corridor>>=
centroids.by.corridor <- 
  Corridors.by.origin.dest %>%
  setkey(Corridor) %>%
  .[US_Corridors_by_Corridor_DS] %>%
  data.table:::merge.data.table(nycflights.airports, by.x = "Origin", by.y = "faa",
                                suffixes = c(".corridor", ".orig")) %>%
  data.table:::merge.data.table(nycflights.airports, by.x = "Dest", by.y = "faa",
                                suffixes = c(".orig", ".dest")) %>%
  # We need to select only the routes that match the Corridor, not the Corridor reversed
  data.table:::merge.data.table(market_ids, by.x = "Origin", by.y = "FAA") %>%
  filter(substr(Corridor, 0, 5) == MarketID) %>%
  arrange(Corridor_DS) %>%
  group_by(Corridor_DS) %>%
  summarise(lat.dest.centroid = mean(lat.dest), 
            lon.dest.centroid = mean(lon.dest),
            lat.orig.centroid = mean(lat.orig),
            lon.orig.centroid = mean(lon.orig)) %>%
  ungroup %>%
  setkey(Corridor_DS)
@

<<Map-Noncancelled-flights-by-week-corridor>>=
Noncancelled.flights.by.week.corridor.location <- 
  Noncancelled.flights.by.week.corridor %>%
  setkey(Corridor_DS) %>%
  .[centroids.by.corridor]

Noncancelled.flights.by.week.corridor.location %>%
  filter(n > 56, Week == last(Week)) %>%
  ggplot() + 
  geom_polygon(data = map_data("state"), aes(long, lat, group = group), 
               alpha = 0.1, 
               color = grey(0.5, 0.2)) +
  geom_point(aes(x = lon.orig.centroid, y = lat.orig.centroid, 
             xend = lon.dest.centroid, yend = lat.dest.centroid), color = "red") + 
  theme_map() +
  geom_curve(aes(x = lon.orig.centroid, y = lat.orig.centroid, 
             xend = lon.dest.centroid, yend = lat.dest.centroid, 
             color = 1, 
             alpha = n / max(n)), curvature = 0.2, size = 1.5) +
  scale_color_viridis(guide = FALSE) + 
  scale_alpha_identity()
@
\onecolumn

<<Map-Noncancelled-flights-by-week-corridor-animate, fig.width=15, fig.height=11, out.width="15in", out.height="11in", fig.show='animate', fig.keep='all', fig.num=112, interval = 0.02>>=
dates <- 
  unique_dates %>%
  distinct(Week) %$%
  as.Date(paste(Year, Month, DayofMonth, sep = "-"))

Noncancelled.flights.by.week.corridor.location %<>%
  mutate(delay_decile = ntile(avg_delay, 10))


n.max <- max(Noncancelled.flights.by.week.corridor.location$n)
for (the.Week in 13 * (1:112)){
  Noncancelled.flights.by.week.corridor.location %>%
    filter(n > 56, Week == the.Week, lon.orig.centroid != lon.dest.centroid) %>%
    ggplot() + 
    geom_polygon(data = map_data("state"), aes(long, lat, group = group), 
                 alpha = 0.1, 
                 color = grey(0.95, 0.2)) +
    geom_point(aes(x = lon.orig.centroid, y = lat.orig.centroid, 
                   xend = lon.dest.centroid, yend = lat.dest.centroid), 
               size = 1.33,
               color = "red")  + 
    geom_curve(aes(x = lon.orig.centroid, y = lat.orig.centroid, 
                   xend = lon.dest.centroid, yend = lat.dest.centroid, 
                   color = delay_decile, 
                   alpha = n / n.max), curvature = 0.2, size = 1.5) +
    scale_color_viridis(discrete = FALSE) + 
    coord_cartesian(xlim = c(-125, -66), ylim = c(24, 56)) +
    annotate("text", 
             x = -95, y = 55, 
             label = dates[the.Week]) +
    scale_alpha_identity() + 
    theme_map() +
    theme(plot.background = element_rect(fill = grey(0.5)),
          legend.background = element_rect(fill = grey(0.5))) ->
    p
    print(p)
}
@




\end{document}


\end{document}